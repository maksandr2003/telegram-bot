import os
import json
import time
import logging
import asyncio
import random
from dotenv import load_dotenv
from aiohttp import web
from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    Application,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
    AIORateLimiter,
)

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
WEBHOOK_URL = os.getenv("WEBHOOK_URL")
VIDEO_FOLDER = "videos"
DATABASE_FILE = "users.json"
TOTAL_LESSONS = 7

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(level=logging.INFO)

# --- –†–∞–±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ ---
def load_users():
    if os.path.exists(DATABASE_FILE):
        with open(DATABASE_FILE, 'r') as f:
            return json.load(f)
    return {}

def save_users(users):
    with open(DATABASE_FILE, 'w') as f:
        json.dump(users, f, indent=4)

users = load_users()

# --- /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if user_id not in users:
        users[user_id] = {'registered': False, 'current_lesson': 1, 'last_sent': 0, 'course_finished': False}
        save_users(users)

    keyboard = [[InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data='start_registration')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å –æ–±—É—á–µ–Ω–∏—è –ø–æ –ò–ò.\n\n"
        "–•–æ—á–µ—à—å —Ä–∞—Å—Ç–∏ –∏ —É—á–∏—Ç—å—Å—è ‚Äî –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∏ –º—ã –Ω–∞—á–Ω—ë–º! üí°",
        reply_markup=reply_markup
    )

# --- –ö–Ω–æ–ø–∫–∞ "–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ" ---
async def handle_start_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π —Å–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–∏–º —Ç–≤–æ–π –ø–æ–ª.")
    await gender(update, context)

# --- –ó–∞–ø—Ä–æ—Å –ø–æ–ª–∞ ---
async def gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–ú—É–∂—á–∏–Ω–∞", callback_data='gender_male')],
        [InlineKeyboardButton("–ñ–µ–Ω—â–∏–Ω–∞", callback_data='gender_female')]
    ]
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–æ–ª–∞ ---
async def gender_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = str(query.from_user.id)
    gender_value = 'male' if query.data == 'gender_male' else 'female'
    users[user_id]['gender'] = gender_value
    users[user_id]['registered'] = True
    save_users(users)

    await query.answer()
    await query.edit_message_text("–ü–æ–ª —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω. –ü—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ –ø–µ—Ä–≤–æ–º—É —É—Ä–æ–∫—É!")
    await send_video_to_user(user_id, context)

# --- –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ---
async def send_video_to_user(user_id, context):
    user_data = users.get(user_id)
    if not user_data or not user_data['registered'] or user_data.get('course_finished'):
        return

    lesson_number = user_data['current_lesson']
    if lesson_number > TOTAL_LESSONS:
        users[user_id]['course_finished'] = True
        save_users(users)
        await context.bot.send_message(chat_id=int(user_id),
            text="üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –∑–∞–≤–µ—Ä—à–∏–ª –≤–µ—Å—å –∫—É—Ä—Å. –≠—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ –±–æ–ª—å—à–æ–≥–æ –ø—É—Ç–∏! üöÄ")
        return

    video_path = os.path.join(VIDEO_FOLDER, f"lesson{lesson_number}.mp4")
    if os.path.exists(video_path):
        try:
            gender = user_data.get('gender', 'male')
            messages = [
                f"–£—Ä–æ–∫ ‚Ññ{lesson_number} —É–∂–µ –≤ –ø—É—Ç–∏!",
                f"–¢—ã —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è –æ—Ç–ª–∏—á–Ω–æ! –£—Ä–æ–∫ ‚Ññ{lesson_number}.",
                f"–í–æ—Ç –∏ —Å–ª–µ–¥—É—é—â–∏–π ‚Äî –£—Ä–æ–∫ ‚Ññ{lesson_number}."
            ]
            if gender == 'female':
                messages = [
                    f"–¢—ã —Å—É–ø–µ—Ä! –£—Ä–æ–∫ ‚Ññ{lesson_number} —É–∂–µ –∂–¥—ë—Ç —Ç–µ–±—è!",
                    f"–¢—ã –º–æ–ª–æ–¥–µ—Ü! –ü–æ—Ä–∞ –¥–∞–ª—å—à–µ ‚Äî –£—Ä–æ–∫ ‚Ññ{lesson_number}.",
                    f"–í–æ—Ç –∏ —Å–ª–µ–¥—É—é—â–∏–π ‚Äî –£—Ä–æ–∫ ‚Ññ{lesson_number}."
                ]
            caption = f"–£—Ä–æ–∫ {lesson_number} ‚Äî –ø–æ–µ—Ö–∞–ª–∏!"
            await context.bot.send_message(chat_id=int(user_id), text=random.choice(messages))
            with open(video_path, 'rb') as video:
                await context.bot.send_video(chat_id=int(user_id), video=video, caption=caption)
            users[user_id]['current_lesson'] += 1
            users[user_id]['last_sent'] = int(time.time())
            save_users(users)
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")
    else:
        logging.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {video_path}")

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ Telegram webhook –∑–∞–ø—Ä–æ—Å–æ–≤ ---
async def webhook_handler(request):
    data = await request.json()
    update = Update.de_json(data, bot.bot)
    await app.process_update(update)
    return web.Response()

# --- –ó–∞–ø—É—Å–∫ ---
async def main():
    global app, bot
    app = Application.builder().token(BOT_TOKEN).rate_limiter(AIORateLimiter()).build()
    bot = app.bot

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º handlers
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_start_button, pattern="^start_registration$"))
    app.add_handler(CallbackQueryHandler(gender_selected, pattern="^gender_"))

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook
    await bot.delete_webhook()
    await bot.set_webhook(WEBHOOK_URL)

    # aiohttp —Å–µ—Ä–≤–µ—Ä
    web_app = web.Application()
    web_app.router.add_post("/webhook", webhook_handler)
    web_app.router.add_get("/", lambda request: web.Response(text="–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç!"))

    port = int(os.environ.get("PORT", 8080))
    runner = web.AppRunner(web_app)
    await runner.setup()
    site = web.TCPSite(runner, "0.0.0.0", port)
    await site.start()

    print(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}...")

    # –°—Ç–∞—Ä—Ç –±–æ—Ç–∞ (–Ω—É–∂–Ω–æ –¥–ª—è —Ä–∞–±–æ—Ç—ã .process_update)
    await app.initialize()
    await app.start()
    await app.updater.start_polling()  # –ø—É—Å—Ç–æ–π polling —á—Ç–æ–±—ã –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å update —á–µ—Ä–µ–∑ webhook

    # –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    await asyncio.Event().wait()

if __name__ == "__main__":
    asyncio.run(main())
