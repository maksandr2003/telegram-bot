import os
import json
import time
import logging
import asyncio
import random
import nest_asyncio
nest_asyncio.apply()

from telegram import Update, InlineKeyboardMarkup, InlineKeyboardButton
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    CallbackQueryHandler,
    ContextTypes,
)
import schedule
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
BOT_TOKEN = os.getenv("BOT_TOKEN")

if not BOT_TOKEN:
    print("Error: BOT_TOKEN is missing!")
    exit()

VIDEO_FOLDER = 'videos'
DATABASE_FILE = 'users.json'
LESSON_INTERVAL = 24 * 60 * 60  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É —É—Ä–æ–∫–∞–º–∏ (1 –¥–µ–Ω—å)
TOTAL_LESSONS = 7

# --- –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ ---
logging.basicConfig(level=logging.INFO)

# --- –†–∞–±–æ—Ç–∞ —Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è–º–∏ ---
def load_users():
    if os.path.exists(DATABASE_FILE):
        with open(DATABASE_FILE, 'r') as f:
            return json.load(f)
    return {}

def save_users(users):
    with open(DATABASE_FILE, 'w') as f:
        json.dump(users, f, indent=4)

users = load_users()

# --- –ö–æ–º–∞–Ω–¥–∞ /start ---
async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = str(update.effective_user.id)
    if user_id not in users:
        users[user_id] = {'registered': False, 'current_lesson': 1, 'last_sent': 0, 'course_finished': False}
        save_users(users)

    keyboard = [[InlineKeyboardButton("üöÄ –ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ", callback_data='start_registration')]]
    reply_markup = InlineKeyboardMarkup(keyboard)
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Ç–≤–æ–π –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π –ø—É—Ç—å –æ–±—É—á–µ–Ω–∏—è –ø–æ –ò–ò.\n\n"
        "–•–æ—á–µ—à—å —Ä–∞—Å—Ç–∏ –∏ —É—á–∏—Ç—å—Å—è ‚Äî –Ω–∞–∂–º–∏ –Ω–∞ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, –∏ –º—ã –Ω–∞—á–Ω—ë–º! üí°",
        reply_markup=reply_markup
    )

# --- –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ –∫–Ω–æ–ø–∫—É "–ù–∞—á–∞—Ç—å –æ–±—É—á–µ–Ω–∏–µ" ---
async def handle_start_button(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    await query.edit_message_text("–û—Ç–ª–∏—á–Ω–æ! –î–∞–≤–∞–π —Å–Ω–∞—á–∞–ª–∞ –æ–ø—Ä–µ–¥–µ–ª–∏–º —Ç–≤–æ–π –ø–æ–ª.")
    await gender(update, context)

# --- –ó–∞–ø—Ä–æ—Å –ø–æ–ª–∞ ---
async def gender(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    keyboard = [
        [InlineKeyboardButton("–ú—É–∂—á–∏–Ω–∞", callback_data='gender_male')],
        [InlineKeyboardButton("–ñ–µ–Ω—â–∏–Ω–∞", callback_data='gender_female')]
    ]
    await context.bot.send_message(
        chat_id=update.effective_chat.id,
        text="–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Å–≤–æ–π –ø–æ–ª:",
        reply_markup=InlineKeyboardMarkup(keyboard)
    )

async def gender_selected(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    user_id = str(query.from_user.id)
    gender_value = 'male' if query.data == 'gender_male' else 'female'
    users[user_id]['gender'] = gender_value
    users[user_id]['registered'] = True
    save_users(users)

    await query.answer()
    await query.edit_message_text("–ü–æ–ª —É—Å–ø–µ—à–Ω–æ –≤—ã–±—Ä–∞–Ω. –ü—Ä–∏—Å—Ç—É–ø–∞–µ–º –∫ –ø–µ—Ä–≤–æ–º—É —É—Ä–æ–∫—É!")
    await send_video_to_user(user_id, context)

# --- –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ –æ–¥–Ω–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é ---
async def send_video_to_user(user_id, context):
    user_data = users.get(user_id)
    if not user_data or not user_data['registered'] or user_data.get('course_finished'):
        return

    lesson_number = user_data['current_lesson']
    if lesson_number > TOTAL_LESSONS:
        users[user_id]['course_finished'] = True
        save_users(users)
        await context.bot.send_message(chat_id=int(user_id), text=
            "üéâ –ü–æ–∑–¥—Ä–∞–≤–ª—è—é! –¢—ã –∑–∞–≤–µ—Ä—à–∏–ª –≤–µ—Å—å –∫—É—Ä—Å. –≠—Ç–æ —Ç–æ–ª—å–∫–æ –Ω–∞—á–∞–ª–æ –±–æ–ª—å—à–æ–≥–æ –ø—É—Ç–∏! üöÄ")
        return

    video_path = os.path.join(VIDEO_FOLDER, f"lesson{lesson_number}.mp4")
    if os.path.exists(video_path):
        try:
            gender = user_data.get('gender', 'male')

            # –°–æ–æ–±—â–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –≤–∏–¥–µ–æ
            messages_male = [
                f"–ë—Ä–∞—Ç, –≥–æ—Ç–æ–≤ –∫ –Ω–æ–≤–æ–º—É —Ä—ã–≤–∫—É? –£—Ä–æ–∫ ‚Ññ{lesson_number} —É–∂–µ –≤ –ø—É—Ç–∏!",
                f"–¢—ã —Å–ø—Ä–∞–≤–ª—è–µ—à—å—Å—è –æ—Ç–ª–∏—á–Ω–æ! –í–æ—Ç —Ç–µ–±–µ —Å–ª–µ–¥—É—é—â–∏–π —à–∞–≥ ‚Äî –£—Ä–æ–∫ ‚Ññ{lesson_number}.",
                f"–ù–∞–¥–µ—é—Å—å, —Ç—ã –æ—Å–≤–æ–∏–ª –ø—Ä–æ—à–ª—ã–π –º–∞—Ç–µ—Ä–∏–∞–ª. –î–µ—Ä–∂–∏ –£—Ä–æ–∫ ‚Ññ{lesson_number}."
            ]
            messages_female = [
                f"–¢—ã —Å—É–ø–µ—Ä! –í–ø–µ—Ä—ë–¥ –∫ –Ω–æ–≤—ã–º –∑–Ω–∞–Ω–∏—è–º ‚Äî –£—Ä–æ–∫ ‚Ññ{lesson_number} —É–∂–µ –∂–¥—ë—Ç —Ç–µ–±—è!",
                f"–¢—ã –º–æ–ª–æ–¥–µ—Ü! –ü–æ—Ä–∞ –¥–≤–∏–≥–∞—Ç—å—Å—è –¥–∞–ª—å—à–µ ‚Äî –¥–µ—Ä–∂–∏ –£—Ä–æ–∫ ‚Ññ{lesson_number}.",
                f"–ù–∞–¥–µ—é—Å—å, –ø—Ä–æ—à–ª—ã–π —É—Ä–æ–∫ –±—ã–ª –ø–æ–ª–µ–∑–Ω—ã–º. –ê –≤–æ—Ç –∏ —Å–ª–µ–¥—É—é—â–∏–π ‚Äî –£—Ä–æ–∫ ‚Ññ{lesson_number}."
            ]
            messages = messages_female if gender == 'female' else messages_male
            message_text = random.choice(messages)

            # –ü–æ–¥–ø–∏—Å–∏ –∫ –≤–∏–¥–µ–æ
            captions = [
                f"–£—Ä–æ–∫ {lesson_number} ‚Äî –ø–æ–µ—Ö–∞–ª–∏!",
                f"–í–ø–µ—Ä—ë–¥! –£—Ä–æ–∫ {lesson_number} —É–∂–µ –∑–¥–µ—Å—å.",
                f"–£—Ä–æ–∫ {lesson_number}. –ù–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å –∑–Ω–∞–Ω–∏–π!"
            ]
            caption_text = random.choice(captions)

            await context.bot.send_message(chat_id=int(user_id), text=message_text)
            with open(video_path, 'rb') as video:
                await context.bot.send_video(chat_id=int(user_id), video=video, caption=caption_text)

            users[user_id]['current_lesson'] += 1
            users[user_id]['last_sent'] = int(time.time())
            save_users(users)

        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤–∏–¥–µ–æ: {e}")
    else:
        logging.error(f"–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {video_path}")

# --- –û—Ç–ø—Ä–∞–≤–∫–∞ –≤–∏–¥–µ–æ –≤—Å–µ–º ---
async def send_daily_video(context: ContextTypes.DEFAULT_TYPE):
    for user_id in users:
        await send_video_to_user(user_id, context)

# --- –ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ ---
async def run_schedule(app):
    while True:
        schedule.run_pending()
        await asyncio.sleep(1)

# --- –û—Å–Ω–æ–≤–Ω–æ–π –∑–∞–ø—É—Å–∫ ---
async def main():
    if not os.path.exists(VIDEO_FOLDER):
        os.makedirs(VIDEO_FOLDER)
        print(f"–°–æ–∑–¥–∞–Ω–∞ –ø–∞–ø–∫–∞ '{VIDEO_FOLDER}'. –î–æ–±–∞–≤—å—Ç–µ —É—Ä–æ–∫–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ lesson1.mp4 –∏ —Ç.–¥.")

    app = ApplicationBuilder().token(BOT_TOKEN).build()
    app.add_handler(CommandHandler("start", start))
    app.add_handler(CallbackQueryHandler(handle_start_button, pattern="^start_registration$"))
    app.add_handler(CallbackQueryHandler(gender_selected, pattern="^gender_"))

    schedule.every().day.at("10:00").do(lambda: asyncio.create_task(send_daily_video(context=app.bot)))
    asyncio.create_task(run_schedule(app))

    await app.run_polling()

if __name__ == "__main__":
    asyncio.run(main())
—Å–≤cd